/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub _bitfield_1: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_1>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_1>() , 4usize);
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl _bindgen_ty_1 {
    #[inline]
    pub fn can_tag_objects(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (1u64 as [u8; 16usize])) >> 0u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_tag_objects(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(1u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 0u32) & (1u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_field_modification_events(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (2u64 as [u8; 16usize])) >> 1u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_generate_field_modification_events(&mut self,
                                                      val:
                                                          ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(2u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 1u32) & (2u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_field_access_events(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4u64 as [u8; 16usize])) >> 2u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_generate_field_access_events(&mut self,
                                                val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(4u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 2u32) & (4u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_bytecodes(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (8u64 as [u8; 16usize])) >> 3u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_get_bytecodes(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(8u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 3u32) & (8u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_synthetic_attribute(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (16u64 as [u8; 16usize])) >> 4u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_get_synthetic_attribute(&mut self,
                                           val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(16u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 4u32) &
                (16u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_owned_monitor_info(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (32u64 as [u8; 16usize])) >> 5u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_get_owned_monitor_info(&mut self,
                                          val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(32u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 5u32) &
                (32u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_current_contended_monitor(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (64u64 as [u8; 16usize])) >> 6u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_get_current_contended_monitor(&mut self,
                                                 val:
                                                     ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(64u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 6u32) &
                (64u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_monitor_info(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (128u64 as [u8; 16usize])) >> 7u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_get_monitor_info(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(128u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 7u32) &
                (128u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_pop_frame(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (256u64 as [u8; 16usize])) >> 8u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_pop_frame(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(256u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 8u32) &
                (256u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_redefine_classes(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (512u64 as [u8; 16usize])) >> 9u32) as
                                      u32)
        }
    }
    #[inline]
    pub fn set_can_redefine_classes(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(512u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 9u32) &
                (512u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_signal_thread(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (1024u64 as [u8; 16usize])) >> 10u32)
                                      as u32)
        }
    }
    #[inline]
    pub fn set_can_signal_thread(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(1024u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 10u32) &
                (1024u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_source_file_name(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (2048u64 as [u8; 16usize])) >> 11u32)
                                      as u32)
        }
    }
    #[inline]
    pub fn set_can_get_source_file_name(&mut self,
                                        val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(2048u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 11u32) &
                (2048u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_line_numbers(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4096u64 as [u8; 16usize])) >> 12u32)
                                      as u32)
        }
    }
    #[inline]
    pub fn set_can_get_line_numbers(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(4096u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 12u32) &
                (4096u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_source_debug_extension(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (8192u64 as [u8; 16usize])) >> 13u32)
                                      as u32)
        }
    }
    #[inline]
    pub fn set_can_get_source_debug_extension(&mut self,
                                              val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(8192u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 13u32) &
                (8192u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_access_local_variables(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (16384u64 as [u8; 16usize])) >> 14u32)
                                      as u32)
        }
    }
    #[inline]
    pub fn set_can_access_local_variables(&mut self,
                                          val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(16384u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 14u32) &
                (16384u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_maintain_original_method_order(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (32768u64 as [u8; 16usize])) >> 15u32)
                                      as u32)
        }
    }
    #[inline]
    pub fn set_can_maintain_original_method_order(&mut self,
                                                  val:
                                                      ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(32768u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 15u32) &
                (32768u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_single_step_events(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (65536u64 as [u8; 16usize])) >> 16u32)
                                      as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_single_step_events(&mut self,
                                               val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(65536u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 16u32) &
                (65536u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_exception_events(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (131072u64 as [u8; 16usize])) >>
                                       17u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_exception_events(&mut self,
                                             val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(131072u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 17u32) &
                (131072u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_frame_pop_events(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (262144u64 as [u8; 16usize])) >>
                                       18u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_frame_pop_events(&mut self,
                                             val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(262144u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 18u32) &
                (262144u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_breakpoint_events(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (524288u64 as [u8; 16usize])) >>
                                       19u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_breakpoint_events(&mut self,
                                              val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(524288u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 19u32) &
                (524288u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_suspend(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (1048576u64 as [u8; 16usize])) >>
                                       20u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_suspend(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(1048576u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 20u32) &
                (1048576u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_redefine_any_class(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (2097152u64 as [u8; 16usize])) >>
                                       21u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_redefine_any_class(&mut self,
                                      val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(2097152u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 21u32) &
                (2097152u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_current_thread_cpu_time(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4194304u64 as [u8; 16usize])) >>
                                       22u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_get_current_thread_cpu_time(&mut self,
                                               val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(4194304u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 22u32) &
                (4194304u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_thread_cpu_time(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (8388608u64 as [u8; 16usize])) >>
                                       23u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_get_thread_cpu_time(&mut self,
                                       val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(8388608u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 23u32) &
                (8388608u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_method_entry_events(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (16777216u64 as [u8; 16usize])) >>
                                       24u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_method_entry_events(&mut self,
                                                val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(16777216u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 24u32) &
                (16777216u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_method_exit_events(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (33554432u64 as [u8; 16usize])) >>
                                       25u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_method_exit_events(&mut self,
                                               val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(33554432u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 25u32) &
                (33554432u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_all_class_hook_events(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (67108864u64 as [u8; 16usize])) >>
                                       26u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_all_class_hook_events(&mut self,
                                                  val:
                                                      ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(67108864u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 26u32) &
                (67108864u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_compiled_method_load_events(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (134217728u64 as [u8; 16usize])) >>
                                       27u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_compiled_method_load_events(&mut self,
                                                        val:
                                                            ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(134217728u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 27u32) &
                (134217728u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_monitor_events(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (268435456u64 as [u8; 16usize])) >>
                                       28u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_monitor_events(&mut self,
                                           val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(268435456u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 28u32) &
                (268435456u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_vm_object_alloc_events(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (536870912u64 as [u8; 16usize])) >>
                                       29u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_vm_object_alloc_events(&mut self,
                                                   val:
                                                       ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(536870912u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 29u32) &
                (536870912u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_native_method_bind_events(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (1073741824u64 as [u8; 16usize])) >>
                                       30u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_native_method_bind_events(&mut self,
                                                      val:
                                                          ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(1073741824u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 30u32) &
                (1073741824u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_garbage_collection_events(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (2147483648u64 as [u8; 16usize])) >>
                                       31u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_garbage_collection_events(&mut self,
                                                      val:
                                                          ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(2147483648u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 31u32) &
                (2147483648u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_object_free_events(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (4294967296u64 as [u8; 16usize])) >>
                                       32u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_object_free_events(&mut self,
                                               val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(4294967296u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 32u32) &
                (4294967296u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_force_early_return(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (8589934592u64 as [u8; 16usize])) >>
                                       33u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_force_early_return(&mut self,
                                      val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(8589934592u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 33u32) &
                (8589934592u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_owned_monitor_stack_depth_info(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (17179869184u64 as [u8; 16usize])) >>
                                       34u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_get_owned_monitor_stack_depth_info(&mut self,
                                                      val:
                                                          ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(17179869184u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 34u32) &
                (17179869184u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_get_constant_pool(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (34359738368u64 as [u8; 16usize])) >>
                                       35u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_get_constant_pool(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(34359738368u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 35u32) &
                (34359738368u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_set_native_method_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (68719476736u64 as [u8; 16usize])) >>
                                       36u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_set_native_method_prefix(&mut self,
                                            val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(68719476736u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 36u32) &
                (68719476736u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_retransform_classes(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (137438953472u64 as [u8; 16usize])) >>
                                       37u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_retransform_classes(&mut self,
                                       val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(137438953472u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 37u32) &
                (137438953472u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_retransform_any_class(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (274877906944u64 as [u8; 16usize])) >>
                                       38u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_retransform_any_class(&mut self,
                                         val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(274877906944u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 38u32) &
                (274877906944u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_resource_exhaustion_heap_events(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (549755813888u64 as [u8; 16usize])) >>
                                       39u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_resource_exhaustion_heap_events(&mut self,
                                                            val:
                                                                ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(549755813888u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 39u32) &
                (549755813888u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn can_generate_resource_exhaustion_threads_events(&self)
     -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (1099511627776u64 as [u8; 16usize]))
                                       >> 40u32) as u32)
        }
    }
    #[inline]
    pub fn set_can_generate_resource_exhaustion_threads_events(&mut self,
                                                               val:
                                                                   ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(1099511627776u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 40u32) &
                (1099511627776u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn at_offset_41(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (279275953455104u64 as [u8; 16usize]))
                                       >> 41u32) as u32)
        }
    }
    #[inline]
    pub fn set_at_offset_41(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(279275953455104u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 41u32) &
                (279275953455104u64 as [u8; 16usize]);
    }
    #[inline]
    pub fn at_offset_48(&self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(((self._bitfield_1 &
                                        (18446462598732840960u64 as
                                             [u8; 16usize])) >> 48u32) as u32)
        }
    }
    #[inline]
    pub fn set_at_offset_48(&mut self, val: ::std::os::raw::c_uint) {
        self._bitfield_1 &= !(18446462598732840960u64 as [u8; 16usize]);
        self._bitfield_1 |=
            ((val as u32 as [u8; 16usize]) << 48u32) &
                (18446462598732840960u64 as [u8; 16usize]);
    }
}
pub type jvmtiCapabilities = _bindgen_ty_1;
